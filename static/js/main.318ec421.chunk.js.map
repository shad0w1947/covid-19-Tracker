{"version":3,"sources":["components/Cards/Cards.module.css","components/Cards/Cards.jsx","api/index.js","components/Charts/Charts.jsx","components/CountryPicker/CountryPicker.jsx","App.js","index.js","App.module.css","components/Charts/Charts.module.css","components/CountryPicker/countryPicker.module.css","images/image.png"],"names":["module","exports","Cards","data","confirmed","recovered","deaths","lastUpdate","className","styles","container","Grid","spacing","justify","item","component","Card","xs","md","cx","card","infected","CardContent","Typography","color","gutterbuttom","variant","start","end","value","duration","separator","Date","toDateString","url","fetchData","country","a","changeableUrl","axios","get","fetchDailyData","response","modifiedData","map","dailyData","total","date","reportDate","console","log","fetchCountriesData","countries","name","Charts","useState","setDailyData","useEffect","fetchAPI","lineChart","length","labels","datasets","label","borderColor","fill","backgroundColor","barChart","options","legend","display","title","text","CountryPicker","handleCountryChange","fetchCountry","setFetchCountry","FormControl","formControl","NativeSelect","defaultValue","onChange","e","target","key","App","setState","state","this","image","src","coronaImage","alt","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.318ec421.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__3bjn6\",\"card\":\"Cards_card__eGUfZ\",\"infected\":\"Cards_infected__-adYp\",\"recovered\":\"Cards_recovered__1aizD\",\"deaths\":\"Cards_deaths__Qdjzq\"};","import React from \"react\";\nimport CountUp from \"react-countup\";\nimport { Card, CardContent, Typography, Grid } from \"@material-ui/core\";\nimport styles from \"./Cards.module.css\";\n\nimport cx from \"classnames\";\n\nconst Cards = ({ data: { confirmed, recovered, deaths, lastUpdate } }) => {\n  if (!confirmed) {\n    return \"Loading...\";\n  }\n  return (\n    <div className={styles.container}>\n      <Grid container spacing={3} justify=\"center\">\n        <Grid\n          item\n          component={Card}\n          xs={12}\n          md={3}\n          className={cx(styles.card, styles.infected)}\n        >\n          <CardContent>\n            <Typography color=\"textSecondary\" gutterbuttom=\"true\">\n              Infected\n            </Typography>\n            <Typography variant=\"h5\">\n              <CountUp\n                start={0}\n                end={confirmed.value}\n                duration={2}\n                separator=\",\"\n              />\n            </Typography>\n            <Typography color=\"textSecondary\">\n              {new Date(lastUpdate).toDateString()}\n            </Typography>\n            <Typography variant=\"body2\">\n              Number of active cases of COVID-19\n            </Typography>\n          </CardContent>\n        </Grid>\n\n        <Grid\n          item\n          component={Card}\n          xs={12}\n          md={3}\n          className={cx(styles.card, styles.recovered)}\n        >\n          <CardContent>\n            <Typography color=\"textSecondary\" gutterbuttom=\"true\">\n              Recovered\n            </Typography>\n            <Typography variant=\"h5\">\n              <CountUp\n                start={0}\n                end={recovered.value}\n                duration={2}\n                separator=\",\"\n              />\n            </Typography>\n            <Typography color=\"textSecondary\">\n              {new Date(lastUpdate).toDateString()}\n            </Typography>\n            <Typography variant=\"body2\">\n              Number of recovered from COVID-19\n            </Typography>\n          </CardContent>\n        </Grid>\n\n        <Grid\n          item\n          component={Card}\n          xs={12}\n          md={3}\n          className={cx(styles.card, styles.deaths)}\n        >\n          <CardContent>\n            <Typography color=\"textSecondary\" gutterbuttom=\"true\">\n              Deaths\n            </Typography>\n            <Typography variant=\"h5\">\n              <CountUp\n                start={0}\n                end={deaths.value}\n                duration={2}\n                separator=\",\"\n              />\n            </Typography>\n            <Typography color=\"textSecondary\">\n              {new Date(lastUpdate).toDateString()}\n            </Typography>\n            <Typography variant=\"body2\">\n              Number of deaths caused by COVID-19\n            </Typography>\n          </CardContent>\n        </Grid>\n      </Grid>\n    </div>\n  );\n};\n\nexport default Cards;\n","import axios from 'axios'\n\nconst url = \"https://covid19.mathdro.id/api\";\n\nexport const fetchData = async (country) => {\n    let changeableUrl = url;\n    if (country) {\n        changeableUrl = `${url}/countries/${country}`;\n    }\n    try {\n        const { data: { confirmed, recovered, deaths, lastUpdate } } = await axios.get(changeableUrl);\n        return { confirmed, recovered, deaths, lastUpdate };\n    } catch (err) {\n\n    }\n}\n\nexport const fetchDailyData = async () => {\n    try {\n        const response = await axios.get(`${url}/daily`);\n        const { data } = response\n        const modifiedData = data.map((dailyData) => ({\n            confirmed: dailyData.confirmed.total,\n            deaths: dailyData.deaths.total,\n            recovered: dailyData.recovered.total,\n            date: dailyData.reportDate\n        }));\n        console.log(response);\n        return modifiedData;\n\n    } catch (error) {\n\n    }\n}\n\nexport const fetchCountriesData = async () => {\n    try {\n        const { data: { countries } } = await axios.get(`${url}/countries`);\n        // const modifiedData = data.map((dailyData) => ({\n        //     confirmed: dailyData.confirmed.total,\n        //     deaths: dailyData.deaths.total,\n        //     recovered: dailyData.recovered.total,\n        //     date: dailyData.reportDate\n        // }))\n        return countries.map((country) => country.name);\n\n    } catch (error) {\n\n    }\n}","import React, { useState, useEffect } from \"react\";\nimport { fetchDailyData } from \"../../api\";\nimport { Line, Bar } from \"react-chartjs-2\";\nimport styles from \"./Charts.module.css\";\n\nconst Charts = ({ data, country }) => {\n  const [dailyData, setDailyData] = useState([]);\n  useEffect(() => {\n    const fetchAPI = async () => {\n      setDailyData(await fetchDailyData());\n    };\n\n    console.log(dailyData);\n    fetchAPI();\n  }, []);\n\n  const lineChart = dailyData.length ? (\n    <Line\n      data={{\n        labels: dailyData.map(({ date }) => date),\n        datasets: [\n          {\n            data: dailyData.map(({ confirmed }) => confirmed),\n            label: \"Infected\",\n            borderColor: \"#3333ff\",\n            fill: true,\n          },\n          {\n            data: dailyData.map(({ recovered }) => recovered),\n            label: \"Recovered\",\n            borderColor: \"green\",\n            backgroundColor: \"rgba(0,255,0,0.5)\",\n            fill: true,\n          },\n          {\n            data: dailyData.map(({ deaths }) => deaths),\n            label: \"Death\",\n            borderColor: \"red\",\n            backgroundColor: \"rgba(255,0,0,0.5)\",\n            fill: true,\n          },\n        ],\n      }}\n    />\n  ) : null;\n\n  const barChart = data.confirmed ? (\n    <Bar\n      data={{\n        labels: [\"Infected\", \"Recovered\", \"Deaths\"],\n        datasets: [\n          {\n            label: \"People\",\n            backgroundColor: [\n              \"rgb(0,0,255,0.5)\",\n              \"rgb(0,255,0,0.5)\",\n              \"rgb(255,0,0,0.5)\",\n            ],\n            data: [\n              data.confirmed.value,\n              data.recovered.value,\n              data.deaths.value,\n            ],\n          },\n        ],\n      }}\n      options={{\n        legend: { display: false },\n        title: { display: true, text: `Current state in ${country}` },\n      }}\n    />\n  ) : null;\n\n  return (\n    <div className={styles.container}>{country ? barChart : lineChart}</div>\n  );\n};\n\nexport default Charts;\n","import React, { useState, useEffect } from \"react\";\nimport { NativeSelect, FormControl } from \"@material-ui/core\";\nimport { fetchCountriesData } from \"../../api\";\n\nimport styles from \"./countryPicker.module.css\";\n\nconst CountryPicker = ({ handleCountryChange }) => {\n  const [fetchCountry, setFetchCountry] = useState([]);\n  useEffect(() => {\n    const fetchCountry = async () => {\n      setFetchCountry(await fetchCountriesData());\n    };\n    fetchCountry();\n  }, [setFetchCountry]);\n  return (\n    <FormControl className={styles.formControl}>\n      <NativeSelect\n        defaultValue=\"\"\n        onChange={(e) => handleCountryChange(e.target.value)}\n      >\n        <option value=\"Global\">Global</option>\n        {fetchCountry.map((country) => (\n          <option key={country} value={country}>\n            {country}\n          </option>\n        ))}\n      </NativeSelect>\n    </FormControl>\n  );\n};\n\nexport default CountryPicker;\n","import React from 'react';\n\nimport { Cards, Charts, CountryPicker } from './components';\nimport styles from './App.module.css';\n\nimport { fetchData } from './api'\n\nimport coronaImage from './images/image.png'\n\nclass App extends React.Component {\n\n    constructor() {\n        super();\n        this.state = { data: {}, country: '' };\n    }\n\n    async componentDidMount() {\n        const data = await fetchData();\n        this.setState({ data: data });\n\n    }\n\n    handleCountryChange = async (country) => {\n        console.log(country)\n        let data = {};\n        if (country === \"Global\") {\n            data = await fetchData();\n            this.setState({ data: data, country: '' });\n        }\n        else {\n            data = await fetchData(country);\n            this.setState({ data: data, country: country });\n        }\n\n    }\n\n    render() {\n        /// it is eqal to data= this.state.data;\n        const { data, country } = this.state;\n        return (\n            <div className={styles.container}>\n                <img className={styles.image} src={coronaImage} alt=\"covid19\" />\n                <Cards data={data} />\n                <CountryPicker handleCountryChange={this.handleCountryChange} />\n                <Charts data={data} country={country} />\n            </div>\n        )\n    }\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom'\n\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__1MQN3\",\"image\":\"App_image__3byI1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Charts_container__1mZfu\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"countryPicker_formControl__3wHDU\"};","module.exports = __webpack_public_path__ + \"static/media/image.d7265326.png\";"],"sourceRoot":""}